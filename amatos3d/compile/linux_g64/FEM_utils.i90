# 1 "/scratch/cen/numgeo/teffy/thesis_intel/amatos3d/compile/linux_g64/FEM_utils.f90"
!*****************************************************************
!
! MODULE NAME:
!        FEM_utils
! FUNCTION:
!        some utility functions for the grid generation
! CONTAINS:
!-----------------------------------------------------------------
!
! NAME:
!	calc_area
! FUNCTION:
!	calculate area of an element
! SYNTAX:
!	real= calc_area(real.arr, real.arr, real.arr)
!
! ON INPUT:
!	r_coord1: coordinate array of edge     (required)	real/double
!	r_coord2: coordinate array of edge     (required)	real/double
!	r_coord3: coordinate array of edge     (required)	real/double
! ON OUTPUT:
!	calc_area: area of element				real/double
! CALLS:
!
! COMMENTS:
!
!-----------------------------------------------------------------
!
! NAME:
!	calc_volume
! FUNCTION:
!	calculate volume of a tetrahedron
! SYNTAX:
!	real= calc_area(real.arr, real.arr, real.arr, real.arr)
!
! ON INPUT:
!	r_coord1: coordinate array of edge     (required)	real/double
!	r_coord2: coordinate array of edge     (required)	real/double
!	r_coord3: coordinate array of edge     (required)	real/double
!	r_coord4: coordinate array of edge     (required)	real/double
! ON OUTPUT:
!	calc_volume: volume of a tetrahedron			real/double
! CALLS:
!
! COMMENTS:
!
!-----------------------------------------------------------------
!
! NAME:
!        THREEDIM_in_out, in_out
! FUNCTION:
!        checks, if a given point (x,y) /(x,y,z) lies within a given triangle/tetraeder in plane/space
! SYNTAX:
!        logical= in_out(real.arr, elmt.ptr)
!	 logical= THREEDIM_in_out(real.arr, tetra.ptr)
! ON INPUT:
!        r_coord:  coordinate array             (required)        real
!        p_elem:   pointer to element to test   (required)        elmt.ptr
!        p_tetra:  pointer to tetra to test   (required)          tetra.ptr
! ON OUTPUT:
!        l_in:     .true. if r_coord /in p_elem ,p_tetra                  logical
! CALLS:
!
! COMMENTS:
!        this routine decides whether a point lies in or out of a
!        triangle/tetraeder. this is done with the following approach:
!        transform one vertex of triangle/tetraeder to null.
!        The two/three other points are a basis of R²/R³(if not degenerate)
!        The point lies in the triangle when following is valid in new coordsystem:
!        - the coords of the point are greater or equal zero and
!        - sum of the coords is less or equal 1
!       (Convex combination!!)
!
!-----------------------------------------------------------------
!
! NAME:
!	cross_product
! FUNCTION:
!        computes the cross product of two vectors in R3
! SYNTAX:
!        real.arr = cross_product( real.arr,real.arr)
! ON INPUT:
!        r_a,r_b:  coordinate arrays             (required)        real
! ON OUTPUT:
!        r_result:  normal on r_a x r_b				   real
! CALLS:
!
! COMMENTS:
!        only valid in R3
!
!-----------------------------------------------------------------
!
! NAME:
!	sameside_3d
! FUNCTION:
!	 Check if a given 3d-point r_vtx_check is on the same side of a line (defined by two points r_vtx_a, r_vtx_b)
! 	 as a known reference point r_vtx_ref
! SYNTAX:
!        logical = sameside_3d(real.arr, real.arr, real.arr, real.arr)
! ON INPUT:
!        r_vtx_a:   	coordinates of point1 defining a line               real
!        r_vtx_b:   	coordinates of point2 defining a line               real
!        r_vtx_ref:   	coordinates of reference point 		            real
!        r_vtx_check:	coordinates of check point ("is it on the same side of the line as r_ref?")
! ON OUTPUT:
!        l_same: 	.true. if r_vtx_check is on the same halfplane as r_vtx_ref
!
! CALLS:  cross_product
!
! COMMENTS:
!
!
!-----------------------------------------------------------------
!
! NAME:
!	point_in_triangle_3d
! FUNCTION:
!	 Checks if a given 3d-point r_vtx_check is in a triangle T=(r_vtx_a, r_vtx_b, r_vtx_c)
! 	 Precondition: Point r_vtx_check is on the same plane as the triangle T
! SYNTAX:
!        logical = point_in_triangle(real.arr, real.arr, real.arr, real.arr)
! ON INPUT:
!        r_vtx_a:   	coordinates of point1 defining the face triangle of a tetrahedra	real
!        r_vtx_b:   	coordinates of point2 defining the face triangle of a tetrahedra	real
!        r_vtx_c:   	coordinates of point3 defining the face triangle of a tetrahedra	real
!        r_vtx_check:	coordinates of check point ("is it in the triangle T?")
! ON OUTPUT:
!        l_in: 		.true. if r_vtx_check is in the triangle T
!
! CALLS:  sameside_3d
!
! COMMENTS:
!       this function checks line by line if checkpoint r_vtx_check lies on the inner side of the border lines of the triangle T
!	if so the point lies in the triangle T
!	inner side, i.e. the part of the halfplane defined by two vertices on which the interior of the triangle T lies
!
!-----------------------------------------------------------------
!
! NAME:   Changed!! calculation now with Double precision
!        element_intersect
! FUNCTION:
!        intersection with an element
! SYNTAX:
!        real.arr= element_intersect(real.arr, real.arr, real.arr, real.arr,real.arr, int)
! ON INPUT:
!        r_elemcoord1:   coordinates of node1                real
!        r_elemcoord2:   coordinates of node2                real
!        r_elemcoord3:   coordinates of node3                real
!        r_check:        coordinates of point                real
!        r_outer:        coordinates of outer point          real
! ON OUTPUT:
!        edge_intersect: coordinates of intersection         real
!        i_info:         status                              integer
! CALLS:  point_in_triangle_3d
!
! COMMENTS:
!        the meaning of i_info is:
!          i_info=  0:  good, we found an intersection
!          i_info= -1:  bad, no intersection with this element
!          i_info=  1:  hm, the checkpoint corresponds to the outer point
!                       i could not check an intersection.
!	   i_info= -2:  the connecting line lies in plane of triangle
!	the 3 possible cases: 	1. no intersection
! 				2.intersection point (vertex of triangle)
!				3.intersection line
!	no precise distiction is made
!
!-----------------------------------------------------------------
!
! NAME:
!        edge_intersect
! FUNCTION:
!        intersection with an edge
! SYNTAX:
!        real.arr= edge_intersect(real.arr, real.arr, real.arr, real.arr, int)
! ON INPUT:
!        r_edgecoord1:   coordinates of node1                real
!        r_edgecoord2:   coordinates of node2                real
!        r_check:        coordinates of point                real
!        r_outer:        coordinates of outer point        real
! ON OUTPUT:
!        edge_intersect: coordinates of intersection        real
!        i_info:         status                                integer
! CALLS:
!
! COMMENTS:
!        the meaning of i_info is:
!          i_info=  0:  good, we found an intersection
!          i_info= -1:  bad, there is no intersection because the edge
!                       and the line between both points are probably parallel
!          i_info= -2:  bad, no intersection with this edge segment
!          i_info= -3:  bad, no intersection within this element
!          i_info=  1:  hm, the checkpoint corresponds to the outer point
!                       i could not check an intersection.
!
!-----------------------------------------------------------------
!
! NAME:
!        permutation_sign
! FUNCTION:
!        sign of permutation, permutation is a givin integer array,
!                             this is e.g. returned by LAPACK LU-decomposition
! SYNTAX:
!        int = permutation_sign(int.arr)
! ON INPUT:
!        i_N:    length of i_perm                          integer
!        i_perm: permutation array                         integer
! ON OUTPUT:
!        permutation_sign: sign of permutation (-1 or +1)  integer
! CALLS:
!
! COMMENTS:
!        this can be used to calculate determinants from LU decomposition.
!        the most efficient algorithm seems to be the counting of cycles.
!        sign = (-1)^(n-c), n = permutation length, c = number of cycles
!-----------------------------------------------------------------
!
! PUBLIC:
!
! COMMENTS:
!
! USES:
!        FEM_define, FEM_handle,MISC_globalparam,MISC_error
! LIBRARIES:
!
! REFERENCES:
!
! VERSION(S):
!        1. original version		j. behrens		1/98
!        2. 3D extensions		s. unterstrasser	8/2001
!	 3. point in triangle check	l. mentrup		5/2002
!	 4. calc_volume added		l. mentrup		6/2002
!	 5. calc_barycenter added	l. mentrup		9/2002
!
!*****************************************************************
        MODULE FEM_utils
          USE MISC_globalparam
          USE MISC_error
          USE FEM_define
          USE FEM_handle
          PRIVATE
	  PUBLIC :: THREEDIM_in_out
	  PUBLIC :: element_intersect
          PUBLIC :: in_out
	  PUBLIC :: sameside_3d, point_in_triangle_3d
	  PUBLIC :: calc_area, calc_volume, calc_barycenter
	  CONTAINS
!*****************************************************************
 
 	  FUNCTION calc_area(r_coord1, r_coord2, r_coord3) RESULT (r_area)

!---------- local declarations

	  IMPLICIT NONE

	  REAL (KIND = GRID_SR), DIMENSION(DEF_dimension), INTENT(in) :: r_coord1, r_coord2, r_coord3
	  REAL (KIND = GRID_SR)                                       :: r_area
	  REAL (KIND = GRID_SR)                                       :: r_c
	  REAL (KIND = GRID_SR), DIMENSION(DEF_dimension)             :: r_a, r_b

!---------- calculate vector components

	  r_a= r_coord2- r_coord1
	  r_b= r_coord3- r_coord1

!---------- calculate components (a,b,c) of cross product vector

	  r_c= (r_a(1)* r_b(2)- r_a(2)* r_b(1))

!---------- calculate area

	  r_area= abs(r_c)* 0.5

	  RETURN
	  END FUNCTION calc_area

!*****************************************************************
 
 	  FUNCTION calc_volume(r_coord1, r_coord2, r_coord3, r_coord4) RESULT (r_volume)

!---------- local declarations

	  IMPLICIT NONE

	  REAL (KIND = GRID_SR), DIMENSION(DEF_dimension), INTENT(in) :: r_coord1, r_coord2, r_coord3, r_coord4
	  REAL (KIND = GRID_SR)                                       :: r_volume
	  REAL (KIND = GRID_SR), DIMENSION(DEF_dimension)             :: r_a, r_b, r_c, r_tmp


!----------    check dimension
	if  (DEF_dimension/=3) then
	  CALL print_error(a_err='[calc_volume:] This is the 3D-version')
	end if

!---------- calculate vector components

	  r_a= r_coord2- r_coord1
	  r_b= r_coord3- r_coord1
	  r_c= r_coord4- r_coord1

!---------- calculate cross product vector

	  r_tmp= cross_product(r_b, r_c)
	  

!---------- calculate volume of a tetrahedron: V = 1/6* <r_a,  (r_b x r_c)>

	  r_volume = ABS(DOT_PRODUCT(r_a, r_tmp) / 6.)

	  RETURN
	  END FUNCTION calc_volume


!*****************************************************************
 	  FUNCTION calc_barycenter(r_coord1, r_coord2, r_coord3, r_coord4) RESULT (r_bary)

!---------- local declarations

	  IMPLICIT NONE

	  REAL (KIND = GRID_SR), DIMENSION(DEF_dimension), INTENT(in)  	:: r_coord1, r_coord2, r_coord3, r_coord4
	  REAL (KIND = GRID_SR), DIMENSION(DEF_dimension)		:: r_bary
	  INTEGER (KIND = GRID_SI)					:: i_cnt


!----------    check dimension
	if  (DEF_dimension/=3) then
	  CALL print_error(a_err='[FEM_utils:calc_barycenter] Dimension mismathc. This is the 3D-version')
	end if

!---------- calculate vector components
        dim_loop: DO i_cnt=1, DEF_dimension
	  r_bary(i_cnt) = 0.25*(r_coord1(i_cnt) + r_coord2(i_cnt) + r_coord3(i_cnt) + r_coord4(i_cnt))
	END DO dim_loop

	RETURN
	END FUNCTION calc_barycenter


!*****************************************************************
 
        FUNCTION in_out(r_coord, p_elem) RESULT (l_in)

!---------- local declarations

        IMPLICIT NONE

        REAL (KIND = GRID_SR), DIMENSION(DEF_dimension), INTENT(in) :: r_coord
        TYPE (elmt), POINTER                       :: p_elem
        TYPE (node), POINTER                       :: p_ntmp
        LOGICAL                                    :: l_in
        REAL (KIND = GRID_SR), DIMENSION(DEF_dimension)             :: r_node1, r_node2, r_node3,r_a,r_b,r_c
        REAL (KIND = GRID_SR)		                           :: d, lambda1,lambda2

!---------- set in_out value to out

         l_in= .FALSE.

!----------    check dimension
	if  (DEF_dimension/=2) then
	  CALL print_error(a_err='[i_out:] This is the 2D-version...')
	end if

!---------- set coordinates

        p_ntmp => p_nhash(p_elem%def%p_node(1))%np
        r_node1=  p_ntmp%def%r_coor
        p_ntmp => p_nhash(p_elem%def%p_node(2))%np
        r_node2=  p_ntmp%def%r_coor
        p_ntmp => p_nhash(p_elem%def%p_node(3))%np
        r_node3=  p_ntmp%def%r_coor

!---------- move to Ursprung
	r_a=r_node2-r_node1
	r_b=r_node3-r_node1
	r_c=r_coord-r_node1

!---------- linear transformation
	d=r_a(1)*r_b(2)-r_a(2)*r_b(1)
	if (d==0) then
	  CALL print_error(a_err='[i_out:] triangle degenerated')
	end if
	d=1/d;
	lambda1=d*(r_c(1)*r_b(2)-r_c(2)*r_b(1))
	lambda2=d*(r_a(1)*r_c(2)-r_a(2)*r_c(1))

!---------- check if  convex combination

	if (lambda1>=0 .AND. lambda2>=0 .AND. (lambda1+lambda2)<=1 ) l_in= .TRUE.

        RETURN
        END FUNCTION in_out
 
!********************************************************************************


FUNCTION THREEDIM_in_out ( r_coord, p_tetra) RESULT (l_in)

! ------------ local declarations

       IMPLICIT NONE

       REAL (KIND = GRID_SR), DIMENSION (DEF_dimension), INTENT (in) 	:: r_coord
       TYPE (tetra), POINTER 				:: p_tetra
       TYPE (node), POINTER 				:: p_ntmp
       LOGICAL 						:: l_in
       DOUBLE PRECISION, DIMENSION(DEF_dimension) 	:: r_node1, r_node2, r_node3, r_node4
       DOUBLE PRECISION, DIMENSION(DEF_dimension) 	:: r_coo
       REAL (KIND = GRID_SR),DIMENSION(DEF_dimension) 	:: r_point
       REAL (KIND = GRID_SR),DIMENSION(DEF_dimension,DEF_dimension) 	:: rmat
       REAL (KIND = GRID_SR)						:: d, lambda1, lambda2, lambda3
       INTEGER (KIND = GRID_SI)						:: i_cnt	
       INTEGER (KIND = GRID_SI),DIMENSION(DEF_dimension)			::p

!----------    check dimension

	if  (DEF_dimension/=3) then
	  CALL print_error(a_err='[THREEDIM_in_out]: Dimension mismatch!')
	end if
  
! --------- set in_out value to out

	l_in = .FALSE.

! -------- set coordinates

	p_ntmp => p_nhash(p_tetra%def%p_node(1))%np
	r_node1 = DBLE(p_ntmp%def%r_coor)
	p_ntmp => p_nhash(p_tetra%def%p_node(2))%np
	r_node2 = DBLE(p_ntmp%def%r_coor)
	p_ntmp => p_nhash(p_tetra%def%p_node(3))%np
	r_node3 = DBLE(p_ntmp%def%r_coor)
	p_ntmp => p_nhash(p_tetra%def%p_node(4))%np
	r_node4 = DBLE(p_ntmp%def%r_coor)
	r_coo   = DBLE(r_coord)


	IF (d_sameside_3d(r_node1, r_node2, r_node3, r_node4, r_coo)) THEN
	  IF (d_sameside_3d(r_node1, r_node2, r_node4, r_node3, r_coo)) THEN
	    IF (d_sameside_3d(r_node1, r_node4, r_node3, r_node2, r_coo)) THEN
	      IF (d_sameside_3d(r_node4, r_node2, r_node3, r_node1, r_coo)) THEN 
	        l_in = .TRUE.
	      END IF
	    END IF
	  END IF
	END IF
	

	RETURN
	END FUNCTION THREEDIM_in_out
	
!*****************************************************************

      FUNCTION normalize(r_in) RESULT (r_result)

!---------- local declarations

        IMPLICIT NONE

	REAL (KIND = GRID_SR), DIMENSION(DEF_dimension), INTENT(in) :: r_in
	REAL (KIND = GRID_SR), DIMENSION(DEF_dimension)             :: r_result
	REAL (KIND = GRID_SR)                                       :: r_tmp


!---------- calculate the cross product of two given vectors r_a and r_b

	r_tmp           = euklid_length(r_in)
	IF(abs(r_tmp) < DEF_EPS) THEN
	  r_result= 0.0
	ELSE
	  r_result 	= r_in/ r_tmp
	END IF
	
	RETURN
	
      END FUNCTION normalize
	
!*****************************************************************

      FUNCTION euklid_length(r_in) RESULT (r_result)

!---------- local declarations

        IMPLICIT NONE

	REAL (KIND = GRID_SR), DIMENSION(DEF_dimension), INTENT(in) :: r_in
	REAL (KIND = GRID_SR)                                       :: r_result


!---------- calculate the cross product of two given vectors r_a and r_b

	r_result 	= sqrt(DOT_PRODUCT(r_in, r_in))
	
	RETURN
	
      END FUNCTION euklid_length
	
!*****************************************************************

      FUNCTION d_normalize(r_in) RESULT (r_result)

!---------- local declarations

        IMPLICIT NONE

	DOUBLE PRECISION, DIMENSION(DEF_dimension), INTENT(in) :: r_in
	DOUBLE PRECISION, DIMENSION(DEF_dimension)             :: r_result
	DOUBLE PRECISION                                       :: r_tmp


!---------- calculate the dot product of two given vectors r_a and r_b

	r_tmp           = d_euklid_length(r_in)
	IF(abs(r_tmp) < DEF_EPS) THEN
	  r_result= 0.0d0
	ELSE
	  r_result 	= r_in/ r_tmp
	END IF
	
	RETURN
	
      END FUNCTION d_normalize
	
!*****************************************************************

      FUNCTION d_euklid_length(r_in) RESULT (r_result)

!---------- local declarations

        IMPLICIT NONE

	DOUBLE PRECISION, DIMENSION(DEF_dimension), INTENT(in) :: r_in
	DOUBLE PRECISION                                       :: r_result


!---------- calculate the dot product of two given vectors r_a and r_b

	r_result 	= sqrt(DOT_PRODUCT(r_in, r_in))
	
	RETURN
	
      END FUNCTION d_euklid_length
	
!*****************************************************************

      FUNCTION cross_product(r_a, r_b) RESULT (r_result)

!---------- local declarations

        IMPLICIT NONE

	REAL (KIND = GRID_SR), DIMENSION(3), INTENT(in)			:: r_a, r_b
	REAL (KIND = GRID_SR), DIMENSION(3)				:: r_result


!---------- calculate the cross product of two given vectors r_a and r_b

	r_result(1) 	= (r_a(2)*r_b(3)) - (r_a(3)*r_b(2))
	r_result(2)	= (r_a(3)*r_b(1)) - (r_a(1)*r_b(3))
	r_result(3)	= (r_a(1)*r_b(2)) - (r_a(2)*r_b(1))
	
	RETURN
	
      END FUNCTION cross_product
      
!*****************************************************************

      FUNCTION d_cross_product(r_a, r_b) RESULT (r_result)

!---------- local declarations

        IMPLICIT NONE

	DOUBLE PRECISION, DIMENSION(3), INTENT(in)	:: r_a, r_b
	DOUBLE PRECISION, DIMENSION(3)			:: r_result


!---------- calculate the cross product of two given vectors r_a and r_b

	r_result(1) 	= (r_a(2)*r_b(3)) - (r_a(3)*r_b(2))
	r_result(2)	= (r_a(3)*r_b(1)) - (r_a(1)*r_b(3))
	r_result(3)	= (r_a(1)*r_b(2)) - (r_a(2)*r_b(1))
	
	RETURN
	
      END FUNCTION d_cross_product
      
!*****************************************************************************

      FUNCTION sameside_3d(r_vtx_a, r_vtx_b, r_vtx_c, r_vtx_ref, r_vtx_check) RESULT (l_same)


!---------- Check if a given 3d-point r_vtx_check is on the same side of a plane (defined by three points r_vtx_a, r_vtx_b, r_vtx_c)
!---------- as a known reference point r_vtx_ref


!---------- local declarations

	IMPLICIT NONE

	REAL (KIND = GRID_SR), DIMENSION(DEF_dimension), INTENT(in)	:: r_vtx_a, r_vtx_b, r_vtx_c, r_vtx_ref, r_vtx_check
	LOGICAL 					:: l_same

	REAL (KIND = GRID_SR), DIMENSION(DEF_dimension)			:: r_a, r_b, r_tmp1, r_tmp2, r_tmp3
	REAL (KIND = GRID_SR)						:: r_value, r_dot1, r_dot2
    

!---------- initialize
    
	l_same = .FALSE.

	  
!----------   calculate cross products

	r_tmp1 = r_vtx_c - r_vtx_a
	r_tmp2 = r_vtx_b - r_vtx_a
	
	r_a = cross_product(r_tmp1, r_tmp2)
    
    
!---------- if  r_value >= 0, r_vtx_check is on the same side as r_vtx_ref
	r_tmp3  = 1.e+6*r_vtx_a	
	r_tmp1 	= 1.e+6*r_vtx_check - r_tmp3
	r_tmp2 	= 1.e+6*r_vtx_ref   - r_tmp3
	
	r_dot1 	= DOT_PRODUCT( r_a, r_tmp1)
	r_dot2	= DOT_PRODUCT( r_a, r_tmp2)
	
	r_value	= (r_dot1*r_dot2)

!	IF (r_dot1 == 0.) l_same = .TRUE.
!	IF (r_dot2 == 0.) l_same = .TRUE.
	IF (r_value >= 0.) l_same = .TRUE.

	RETURN
	
      END FUNCTION sameside_3d
!*****************************************************************************

      FUNCTION d_sameside_3d(r_vtx_a, r_vtx_b, r_vtx_c, r_vtx_ref, r_vtx_check) RESULT (l_same)


!---------- Check if a given 3d-point r_vtx_check is on the same side of a plane (defined by three points r_vtx_a, r_vtx_b, r_vtx_c)
!---------- as a known reference point r_vtx_ref


!---------- local declarations

	IMPLICIT NONE

	DOUBLE PRECISION, DIMENSION(DEF_dimension), INTENT(in)	:: r_vtx_a, r_vtx_b, r_vtx_c, r_vtx_ref, r_vtx_check
	LOGICAL 						:: l_same

	DOUBLE PRECISION, DIMENSION(DEF_dimension)		:: r_a, r_b, r_tmp1, r_tmp2, r_tmp3
	DOUBLE PRECISION					:: r_value, r_dot1, r_dot2
    

!---------- initialize
    
	l_same = .FALSE.

	  
!----------   calculate cross products

	r_tmp1 = r_vtx_c - r_vtx_a
	r_tmp2 = r_vtx_b - r_vtx_a
	
	r_a = d_cross_product(r_tmp1, r_tmp2)
    
    
!---------- if  r_value >= 0, r_vtx_check is on the same side as r_vtx_ref
	r_tmp3  = 1.d+6*r_vtx_a	
	r_tmp1 	= 1.d+6*r_vtx_check - r_tmp3
	r_tmp2 	= 1.d+6*r_vtx_ref   - r_tmp3
	
	r_dot1 	= DOT_PRODUCT( r_a, r_tmp1)
	r_dot2	= DOT_PRODUCT( r_a, r_tmp2)
	
	r_value	= (r_dot1*r_dot2)

!	IF (r_dot1 == 0.) l_same = .TRUE.
!	IF (r_dot2 == 0.) l_same = .TRUE.
	IF (r_value >= 0.) l_same = .TRUE.

	RETURN
	
      END FUNCTION d_sameside_3d
!*****************************************************************************
!*****************************************************************************
        FUNCTION same_side_3d(r_vtx_a, r_vtx_b, r_vtx_ref, r_vtx_check) RESULT (l_same)

!----------
!---------- Check if a given 3d-point r_vtx_check is on the same side of a line (defined by two points r_vtx_a, r_vtx_b)
!---------- as a known reference point r_vtx_ref
!----------


!---------- local declarations

        IMPLICIT NONE

        REAL (KIND = GRID_SR), DIMENSION(3), INTENT(in)     	:: r_vtx_a, r_vtx_b, r_vtx_ref, r_vtx_check
	REAL (KIND = GRID_SR), DIMENSION(3)			:: r_a, r_b
	LOGICAL 				:: l_same


!---------- initialize
	
	l_same = .FALSE.


!----------    check dimension

	if  (DEF_dimension/=3) then
	  CALL print_error(a_err='[same_side_3d in FEM_utils]: Dimension mismatch!')
	end if


!----------   calculate cross products

	r_a = cross_product(1.e+6*(r_vtx_b - r_vtx_a), 1.e+6*(r_vtx_check - r_vtx_a))
	r_b = cross_product(1.e+6*(r_vtx_b - r_vtx_a), 1.e+6*(r_vtx_ref - r_vtx_a))
	
	
!---------- if the dot product of r_a and r_b is >= 0, r_vtx_check is on the same side as r_vtx_ref

	if (DOT_PRODUCT(r_a, r_b) >= 0) then
		l_same = .TRUE.
	endif


	RETURN
	END FUNCTION same_side_3d
!*****************************************************************************
        FUNCTION d_same_side_3d(r_vtx_a, r_vtx_b, r_vtx_ref, r_vtx_check) RESULT (l_same)

!----------
!---------- Check if a given 3d-point r_vtx_check is on the same side of a line (defined by two points r_vtx_a, r_vtx_b)
!---------- as a known reference point r_vtx_ref
!----------


!---------- local declarations

        IMPLICIT NONE

        DOUBLE PRECISION, DIMENSION(3), INTENT(in) :: r_vtx_a, r_vtx_b, r_vtx_ref, r_vtx_check
	DOUBLE PRECISION, DIMENSION(3)             :: r_a, r_b
	LOGICAL                                    :: l_same


!---------- initialize
	
	l_same = .FALSE.


!----------    check dimension

	if  (DEF_dimension/=3) then
	  CALL print_error(a_err='[same_side_3d in FEM_utils]: Dimension mismatch!')
	end if


!----------   calculate cross products

	r_a = d_cross_product(1.d+6*(r_vtx_b - r_vtx_a), 1.d+6*(r_vtx_check - r_vtx_a))
	r_b = d_cross_product(1.d+6*(r_vtx_b - r_vtx_a), 1.d+6*(r_vtx_ref - r_vtx_a))
	
	
!---------- if the dot product of r_a and r_b is >= 0, r_vtx_check is on the same side as r_vtx_ref

	if (DOT_PRODUCT(r_a, r_b) >= 0.d0) then
		l_same = .TRUE.
	endif


	RETURN
	END FUNCTION d_same_side_3d
!*****************************************************************************
        FUNCTION point_in_triangle_3d(r_vtx_a, r_vtx_b, r_vtx_c, r_vtx_check) RESULT (l_in)

!----------
!---------- Check if a given 3d-point r_vtx_check is in a triangle (defined by r_vtx_a, r_vtx_b, r_vtx_c)
!---------- Precondition: point r_vtx_check lies in the same plane as the triangle


!---------- local declarations

        IMPLICIT NONE

        REAL (KIND = GRID_SR), DIMENSION(3), INTENT(in)     	:: r_vtx_a, r_vtx_b, r_vtx_c, r_vtx_check
	REAL (KIND = GRID_SR), DIMENSION(3)			:: r_degen
	LOGICAL 					:: l_in


!---------- initialize
	
	l_in = .FALSE.


!----------    check dimension

	if  (DEF_dimension/=3) then
	  CALL print_error(a_err='[point_in_triangle_3d in FEM_utils]: Dimension mismatch!')
	end if


!----------	check if the triangle is degenerated

	r_degen = cross_product(r_vtx_a - r_vtx_c, r_vtx_b - r_vtx_c)
	if ((r_degen(1)==0.) .AND. (r_degen(2)==0.) .AND. (r_degen(3)==0.)) then
	  CALL print_error(a_err='[point_in_triangle_3d in FEM_utils]: Degenerated face')
	end if


!----------   	if r_vtx_check is
!----------	on the same side of line AB as C .AND.
!----------	on the same side of the line AC as B .AND.
!----------	on the same side of the line BC as A
!----------	then its in the triangle!
!----------	The point is encircled by lines which are building up a triangle


	if (same_side_3d(r_vtx_a, r_vtx_b, r_vtx_c, r_vtx_check)) then
		if (same_side_3d(r_vtx_a, r_vtx_c, r_vtx_b, r_vtx_check)) then 
			if (same_side_3d(r_vtx_b, r_vtx_c, r_vtx_a, r_vtx_check)) then
	   			l_in = .TRUE.
			endif
		endif
	endif

	RETURN
	END FUNCTION point_in_triangle_3d
	
!*****************************************************************************
        FUNCTION d_point_in_triangle_3d(r_vtx_a, r_vtx_b, r_vtx_c, r_vtx_check) RESULT (l_in)

!----------
!---------- Check if a given 3d-point r_vtx_check is in a triangle (defined by r_vtx_a, r_vtx_b, r_vtx_c)
!---------- Precondition: point r_vtx_check lies in the same plane as the triangle


!---------- local declarations

        IMPLICIT NONE

        DOUBLE PRECISION, DIMENSION(3), INTENT(in) :: r_vtx_a, r_vtx_b, r_vtx_c, r_vtx_check
	DOUBLE PRECISION, DIMENSION(3)             :: r_degen
	LOGICAL                                    :: l_in


!---------- initialize
	
	l_in = .FALSE.


!----------    check dimension

	if  (DEF_dimension/=3) then
	  CALL print_error(a_err='[point_in_triangle_3d in FEM_utils]: Dimension mismatch!')
	end if


!----------	check if the triangle is degenerated

	r_degen = d_cross_product(r_vtx_a - r_vtx_c, r_vtx_b - r_vtx_c)
	if ((r_degen(1)==0.d0) .AND. (r_degen(2)==0.d0) .AND. (r_degen(3)==0.d0)) then
	  CALL print_error(a_err='[point_in_triangle_3d in FEM_utils]: Degenerated face')
	end if


!----------   	if r_vtx_check is
!----------	on the same side of line AB as C .AND.
!----------	on the same side of the line AC as B .AND.
!----------	on the same side of the line BC as A
!----------	then its in the triangle!
!----------	The point is encircled by lines which are building up a triangle


	if (d_same_side_3d(r_vtx_a, r_vtx_b, r_vtx_c, r_vtx_check)) then
		if (d_same_side_3d(r_vtx_a, r_vtx_c, r_vtx_b, r_vtx_check)) then 
			if (d_same_side_3d(r_vtx_b, r_vtx_c, r_vtx_a, r_vtx_check)) then
	   			l_in = .TRUE.
			endif
		endif
	endif

	RETURN
	END FUNCTION d_point_in_triangle_3d
	

!*****************************************************************************
	FUNCTION element_intersect(r_elemcoord1, r_elemcoord2, r_elemcoord3, r_check, r_outer, i_info) &
	RESULT (r_intersect)

!---------- local declarations
!           INTERNALLY, WE USE DOUBLE PRECISION!

	IMPLICIT NONE

	REAL (KIND = GRID_SR), DIMENSION(DEF_dimension), INTENT(in) :: r_elemcoord1, &
	  r_elemcoord2, r_elemcoord3, r_check, r_outer
	INTEGER (KIND = GRID_SI), INTENT(out), OPTIONAL             :: i_info
	REAL (KIND = GRID_SR), DIMENSION(DEF_dimension)             :: r_intersect

	DOUBLE PRECISION, DIMENSION(DEF_dimension) :: r_normal, r_pa1, &
	  r_pa2, r_pa3, r_diftmp, r_dif, r_inter
	DOUBLE PRECISION                           :: r_dist, r_denom, &
	r_a1, r_a2, r_a3, r_mu, r_angle, r_eps, r_seps, r_one, r_2pi

!----------    check dimension

	if  (DEF_dimension/=3) then
	  CALL print_error(a_err='[element_intersect]: Dimension mismatch!')
	end if

!---------- initialize informational value (and others)

	r_one= 1.0d0
	r_eps= epsilon(r_one)
	r_seps = DBLE(DEF_EPS)
	r_2pi = 8.0d0* atan(r_one)
        IF(present(i_info)) i_info= 0
	r_intersect=(/999.,999.,999./)

!---------- calculate face values (parametrize face by plane equation)

	r_diftmp= DBLE(r_elemcoord2)- DBLE(r_elemcoord1)
	r_dif   = DBLE(r_elemcoord3)- DBLE(r_elemcoord1)
	r_normal= d_cross_product(r_diftmp, r_dif)
	r_normal= d_normalize(r_normal)
	r_dist  = - dot_product(r_normal, DBLE(r_elemcoord1))

!---------- calculate intersection of line with plane

	r_dif   = (DBLE(r_outer)- DBLE(r_check))
	r_denom = dot_product(r_normal, r_dif)

!---------- line and plane parallel

	IF(abs(r_denom) < r_eps) THEN
	  IF(present(i_info)) i_info= -1
	  RETURN
	END IF
	r_mu    = -(r_dist+ dot_product(r_normal, DBLE(r_check)))/r_denom
	r_inter = DBLE(r_check)+ r_mu* r_dif

!---------- intersection not on line segment

	IF(r_mu < 0.0 .OR. r_mu > 1.0) THEN
	  IF(present(i_info)) i_info= -2
	  r_intersect= REAL(r_inter, GRID_SR)
	  RETURN
	END IF

!---------- now determine if intersection is in element
!           this is the alternative with inner angles summing to 360 deg.

	r_pa1= DBLE(r_elemcoord1)- r_inter
	r_pa1= d_normalize(r_pa1)
	r_pa2= DBLE(r_elemcoord2)- r_inter
	r_pa2= d_normalize(r_pa2)
	r_pa3= DBLE(r_elemcoord3)- r_inter
	r_pa3= d_normalize(r_pa3)

	r_angle= 0.0d0
	r_a1 = dot_product(r_pa1, r_pa2)
	IF(r_a1 > 1.0) THEN
	  r_a1 = 1.0
	ELSE 
	  IF (r_a1 < 1.0) THEN
	    r_a1 = -1.0
	  END IF 
	END IF
	r_angle= r_angle+ acos(r_a1)
	
	r_a2 = dot_product(r_pa2, r_pa3)
	IF(r_a2 > 1.0) THEN
	  r_a2 = 1.0
	ELSE 
	  IF (r_a2 < 1.0) THEN
	    r_a2 = -1.0
	  END IF 
	END IF
	r_angle= r_angle+ acos(r_a2)
	
	r_a3 = dot_product(r_pa3, r_pa1)
	IF(r_a3 > 1.0) THEN
	  r_a3 = 1.0
	ELSE 
	  IF (r_a3 < 1.0) THEN
	    r_a3 = -1.0
	  END IF 
	END IF
	r_angle= r_angle+ acos(r_a3)
	
	IF(abs(r_angle - r_2pi) > r_seps) THEN
	  IF(present(i_info)) i_info= -3
	  r_intersect= REAL(r_inter, GRID_SR)
	  RETURN
	END IF

!---------- now determine if intersection is in element
!           this is the alternative using crossproducts (see above routines).

! 	IF(.NOT. d_point_in_triangle_3d(DBLE(r_elemcoord1), &
! 	    DBLE(r_elemcoord2), DBLE(r_elemcoord3),r_inter)) THEN
! 	  IF(present(i_info)) i_info= -3
! 	  r_intersect= REAL(r_inter, GRID_SR)
! 	  RETURN
! 	END IF

	r_intersect= REAL(r_inter, GRID_SR)

	RETURN
	END FUNCTION element_intersect

!*****************************************************************
        FUNCTION edge_intersect(r_edgecoord1, r_edgecoord2, r_check, r_outer,i_info) &
          RESULT (r_intersect)

!---------- local declarations

        IMPLICIT NONE

        REAL (KIND = GRID_SR), DIMENSION(DEF_dimension), INTENT(in) :: r_edgecoord1, r_edgecoord2
        REAL (KIND = GRID_SR), DIMENSION(DEF_dimension), INTENT(in) :: r_check, r_outer
        INTEGER (KIND = GRID_SI), INTENT(out), OPTIONAL             :: i_info
        REAL (KIND = GRID_SR), DIMENSION(DEF_dimension)             :: r_intersect
        REAL (KIND = GRID_SR), DIMENSION(DEF_dimension)             :: r_edge1, r_edge2, r_cor
        REAL (KIND = GRID_SR)                                       :: r_lo1, r_lo2, &
          r_up1, r_up2, r_chk, r_spe, r_eps, r_a, r_b, r_c, r_d
        REAL (KIND = GRID_SR), DIMENSION(DEF_dimension)             :: r_emx, r_emn, r_cmx, r_cmn

!---------- initialize informational value

        i_info= 0
        r_spe= 1.
        r_eps= epsilon(r_spe)

!---------- check if the check point corresponds to the outer point

        r_cor= r_check- r_outer
        r_chk= DOT_PRODUCT(r_cor, r_cor)
        check_cor: IF(r_eps > r_chk) THEN
          i_info= 1
          r_intersect= r_check
          RETURN
        END IF check_cor

!---------- check if the point corresponds to a node

        r_cor= r_check- r_edgecoord1
        r_chk= DOT_PRODUCT(r_cor, r_cor)
        node_cor1: IF(r_eps > r_chk) THEN
          r_intersect= r_edgecoord1
          RETURN
        END IF node_cor1

        r_cor= r_check- r_edgecoord2
        r_chk= DOT_PRODUCT(r_cor, r_cor)
        node_cor2: IF(r_eps > r_chk) THEN
          r_intersect= r_edgecoord2
          RETURN
        END IF node_cor2

!---------- order edge coordinates

        edge_ord: IF(r_edgecoord1(1) < r_edgecoord2(1)) THEN
          r_edge1= r_edgecoord1
          r_edge2= r_edgecoord2
        ELSE edge_ord
          r_edge2= r_edgecoord1
          r_edge1= r_edgecoord2
        ENDIF edge_ord

!---------- determine coordinate range

        r_emx(1)= MAX(r_edge1(1), r_edge2(1))
        r_emx(2)= MAX(r_edge1(2), r_edge2(2))
        r_emn(1)= MIN(r_edge1(1), r_edge2(1))
        r_emn(2)= MIN(r_edge1(2), r_edge2(2))
        r_cmx(1)= MAX(r_check(1), r_outer(1))
        r_cmx(2)= MAX(r_check(2), r_outer(2))
        r_cmn(1)= MIN(r_check(1), r_outer(1))
        r_cmn(2)= MIN(r_check(2), r_outer(2))

!---------- calculate differences

        r_lo1= r_edge1(1)- r_edge2(1)
        r_lo2= r_check(1)- r_outer(1)
        r_up1= r_edge1(2)- r_edge2(2)
        r_up2= r_check(2)- r_outer(2)

!---------- check if edge and line are parallel or degenerate
!           CAUTION: THIS IS ONLY IN PLAIN 2D GEOMETRY

        vertical: IF((r_lo1 /= 0) .AND. (r_lo2 /= 0)) THEN
          r_a= r_up1/ r_lo1
          r_b= r_edge1(2)- r_a* r_edge1(1)
          r_c= r_up2/r_lo2
          r_d= r_check(2)- r_c* r_check(1)
          horizontal: IF((abs(r_a) == 0) .AND. (abs(r_c) == 0)) THEN
            IF(r_edge1(2) == r_check(2)) THEN
              IF((r_emn(1) <= r_check(1)) .AND. (r_check(1) <= r_emx(1))) THEN
                r_intersect= r_check
                i_info= 0
              ELSE
                i_info= -2
                r_intersect= 0.0
              END IF
            ELSE
              i_info= -2
              r_intersect= 0.0
            END IF
          ELSE horizontal
          r_intersect(1)= (r_d- r_b)/ (r_a- r_c)
          IF((r_emn(1) <= r_intersect(1)) .AND. (r_intersect(1) <= r_emx(1)) .AND. &
             (r_cmn(1) <= r_intersect(1)) .AND. (r_intersect(1) <= r_cmx(1))) THEN
            r_intersect(2)= r_a* r_intersect(1)+ r_b
            IF((r_emn(2) <= r_intersect(2)) .AND. (r_intersect(2) <= r_emx(2)) .AND. &
               (r_cmn(2) <= r_intersect(2)) .AND. (r_intersect(2) <= r_cmx(2))) THEN
              i_info= 0
            ELSE
              i_info= -2
              r_intersect= 0.0
            END IF
          ELSE
            i_info= -2
            r_intersect= 0.0
          END IF
          END IF horizontal
        ELSE IF((r_lo2 == 0) .AND. (r_lo1 /= 0)) THEN vertical
          r_a= r_up1/ r_lo1
          r_b= r_edge1(2)- r_a* r_edge1(1)
          r_intersect(1)= r_check(1)
          IF((r_emn(1) <= r_intersect(1)) .AND. (r_intersect(1) <= r_emx(1))) THEN
            r_intersect(2)= r_a* r_intersect(1)+ r_b
            IF((r_emn(2) <= r_intersect(2)) .AND. (r_intersect(2) <= r_emx(2)) .AND. &
               (r_cmn(2) <= r_intersect(2)) .AND. (r_intersect(2) <= r_cmx(2))) THEN
              i_info= 0
            ELSE
              i_info= -2
              r_intersect= 0.0
            END IF
          ELSE
            i_info= -2
            r_intersect= 0.0
          END IF
        ELSE IF((r_lo2 /= 0) .AND. (r_lo1 == 0)) THEN vertical
          r_c= r_up2/r_lo2
          r_d= r_check(2)- r_c* r_check(1)
          r_intersect(1)= r_edge1(1)
          IF((r_cmn(1) <= r_intersect(1)) .AND. (r_intersect(1) <= r_cmx(1))) THEN
            r_intersect(2)= r_c* r_intersect(1)+ r_d
            IF((r_emn(2) <= r_intersect(2)) .AND. (r_intersect(2) <= r_emx(2)) .AND. &
               (r_cmn(2) <= r_intersect(2)) .AND. (r_intersect(2) <= r_cmx(2))) THEN
              i_info= 0
            ELSE
              i_info= -2
              r_intersect= 0.0
            END IF
          ELSE
            i_info= -2
            r_intersect= 0.0
          END IF
        ELSE IF((r_lo2 == 0) .AND. (r_lo1 == 0)) THEN vertical
          paral: IF(r_edge1(1) == r_check(1)) THEN
            r_intersect(1)= r_check(1)
            sectn: IF((r_emn(2) <= r_check(2)) .AND. (r_check(2) <= r_emx(2))) THEN
              r_intersect(2)= r_check(2)
            ELSE sectn
              i_info= -1
              r_intersect= 0.0
            END IF sectn
          ELSE paral
            i_info= -1
            r_intersect= 0.0
          END IF paral
        END IF vertical

        RETURN
        END FUNCTION edge_intersect

!************************************************************
        FUNCTION permutation_sign(i_N, i_perm) RESULT(i_sign)
             INTEGER(KIND=GRID_SI), INTENT(IN)                    :: i_N
             INTEGER(KIND=GRID_SI), DIMENSION(:), INTENT(IN)      :: i_perm
             INTEGER(KIND=GRID_SI), DIMENSION(1:i_N)              :: i_mark
             INTEGER(KIND=GRID_SI)                                :: i_cnt
             INTEGER(KIND=GRID_SI)                                :: i_index
             INTEGER(KIND=GRID_SI)                                :: i_cycles
             INTEGER(KIND=GRID_SI)                                :: i_sign

             i_cycles = 0
	     i_sign   = 1

! initialize marks
             DO i_cnt = 1, i_N
	        i_mark(i_cnt) = 0 
             END DO

! iterate over all marks
	     DO i_cnt = 1, i_N

! after a cycle check a mark is not zero
! process only not checked marks
	        IF(i_mark(i_cnt) .EQ. 0) THEN

! count cycles
		    i_cycles = i_cycles + 1
		    i_index = i_cnt

! follow up indeces of permutation
		    DO WHILE(i_mark(i_index) .EQ. 0)

! marking with cycle number provides a partition
! (this could be usefull sometimes)
		       i_mark(i_index) = i_cycles
		       i_index         = i_perm(i_index)
		    END DO
                END IF
             END DO

! this is an easier calculation of (-1)^(i_N - i_cycles)
             IF(MOD(i_N - i_cycles, 2) .NE. 0) i_sign = -1;

        END FUNCTION permutation_sign
!*****************************************************************
!          SUBROUTINE
!
!---------- local declarations
!
!          IMPLICIT NONE
!
!          RETURN
!          END SUBROUTINE

        END MODULE FEM_utils
